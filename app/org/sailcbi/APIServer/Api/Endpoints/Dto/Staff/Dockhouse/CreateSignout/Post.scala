package org.sailcbi.APIServer.Api.Endpoints.Dto.Staff.Dockhouse.CreateSignout

import play.api.libs.json.{JsValue, Json}

/**
 * !!!!!!!!!!!!
 * This file is AUTO-GENERATED by cbidb-schema
 * Do not manually alter this file, or your changes will be lost
 * !!!!!!!!!!!!
 */
case class StaffDockhouseCreateSignoutPostResponseSuccessDto (
	signoutId: Int,
	personId: Option[Int],
	programId: Int,
	boatId: Int,
	signoutType: String,
	cardNum: Option[String],
	sailNumber: Option[String],
	hullNumber: Option[String],
	testRatingId: Option[Int],
	testResult: Option[String],
	isQueued: Boolean,
	signoutDatetime: Option[String],
	$$crew: List[StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew],
	$$tests: List[StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests],
)

case class StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew (
	signoutId: Int,
	personId: Option[Int],
	cardNum: Option[String],
	startActive: Option[String],
)

object StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew {
	implicit val format = Json.format[StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew]
	def apply(v: JsValue): StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew
		= v.as[StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew]
}

case class StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests (
	signoutId: Int,
	personId: Int,
	ratingId: Int,
)

object StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests {
	implicit val format = Json.format[StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests]
	def apply(v: JsValue): StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests
		= v.as[StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests]
}

object StaffDockhouseCreateSignoutPostResponseSuccessDto {
	implicit val StaffDockhouseCreateSignoutPostResponseSuccessDto_CrewFormat
		= StaffDockhouseCreateSignoutPostResponseSuccessDto_Crew.format
	implicit val StaffDockhouseCreateSignoutPostResponseSuccessDto_TestsFormat
		= StaffDockhouseCreateSignoutPostResponseSuccessDto_Tests.format
	implicit val format = Json.format[StaffDockhouseCreateSignoutPostResponseSuccessDto]
	def apply(v: JsValue): StaffDockhouseCreateSignoutPostResponseSuccessDto
		= v.as[StaffDockhouseCreateSignoutPostResponseSuccessDto]
}


case class StaffDockhouseCreateSignoutPostRequestDto (
	skipperPersonId: Int,
	programId: Int,
	skipperCardNumber: String,
	skipperTestRatingId: Option[Int],
	boatId: Int,
	sailNumber: Option[String],
	hullNumber: Option[String],
	classSessionId: Option[Int],
	isRacing: Boolean,
	dockmasterOverride: Boolean,
	didInformKayakRules: Boolean,
	signoutCrew: List[StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew],
)

case class StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew (
	personId: Int,
	cardNumber: String,
	testRatingId: Option[Int],
)

object StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew {
	implicit val format = Json.format[StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew]
	def apply(v: JsValue): StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew
		= v.as[StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew]
}

object StaffDockhouseCreateSignoutPostRequestDto {
	implicit val StaffDockhouseCreateSignoutPostRequestDto_SignoutCrewFormat
		= StaffDockhouseCreateSignoutPostRequestDto_SignoutCrew.format
	implicit val format = Json.format[StaffDockhouseCreateSignoutPostRequestDto]
	def apply(v: JsValue): StaffDockhouseCreateSignoutPostRequestDto
		= v.as[StaffDockhouseCreateSignoutPostRequestDto]
}

