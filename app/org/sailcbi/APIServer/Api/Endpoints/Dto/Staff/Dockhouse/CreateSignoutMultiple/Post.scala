package org.sailcbi.APIServer.Api.Endpoints.Dto.Staff.Dockhouse.CreateSignoutMultiple

import play.api.libs.json.{JsValue, Json}

/**
 * !!!!!!!!!!!!
 * This file is AUTO-GENERATED by cbidb-schema
 * Do not manually alter this file, or your changes will be lost
 * !!!!!!!!!!!!
 */
case class DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess (
	signoutId: Int,
	personId: Option[Int],
	programId: Int,
	boatId: Int,
	signoutType: String,
	cardNum: Option[String],
	sailNumber: Option[String],
	hullNumber: Option[String],
	testRatingId: Option[Int],
	testResult: Option[String],
	isQueued: Boolean,
	signoutDatetime: Option[String],
	$$crew: List[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew],
	$$tests: List[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests],
)

case class DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew (
	signoutId: Int,
	personId: Option[Int],
	cardNum: Option[String],
	startActive: Option[String],
)

object DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew {
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew]
}

case class DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests (
	signoutId: Int,
	personId: Int,
	ratingId: Int,
)

object DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests {
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests]
}

object DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess {
	implicit val DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_CrewFormat
		= DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Crew.format
	implicit val DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_TestsFormat
		= DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess_Tests.format
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostResponseSuccess]
}


case class DtoStaffDockhouseCreateSignoutMultiplePostRequest (
	signouts: List[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts],
)

case class DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts (
	skipperPersonId: Int,
	programId: Int,
	skipperCardNumber: String,
	skipperTestRatingId: Option[Int],
	boatId: Int,
	sailNumber: Option[String],
	hullNumber: Option[String],
	classSessionId: Option[Int],
	isRacing: Boolean,
	dockmasterOverride: Boolean,
	didInformKayakRules: Boolean,
	signoutCrew: List[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew],
)

case class DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew (
	personId: Int,
	cardNumber: String,
	testRatingId: Option[Int],
)

object DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew {
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew]
}

object DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts {
	implicit val DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrewFormat
		= DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts_SignoutCrew.format
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts]
}

object DtoStaffDockhouseCreateSignoutMultiplePostRequest {
	implicit val DtoStaffDockhouseCreateSignoutMultiplePostRequest_SignoutsFormat
		= DtoStaffDockhouseCreateSignoutMultiplePostRequest_Signouts.format
	implicit val format = Json.format[DtoStaffDockhouseCreateSignoutMultiplePostRequest]
	def apply(v: JsValue): DtoStaffDockhouseCreateSignoutMultiplePostRequest
		= v.as[DtoStaffDockhouseCreateSignoutMultiplePostRequest]
}

