package org.sailcbi.APIServer.Api.Endpoints.Dto.Staff.Dockhouse.CreateSignoutMultiple

import play.api.libs.json.{JsValue, Json}

/**
 * !!!!!!!!!!!!
 * This file is AUTO-GENERATED by cbidb-schema
 * Do not manually alter this file, or your changes will be lost
 * !!!!!!!!!!!!
 */
case class StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto (
	signoutId: Int,
	personId: Option[Int],
	programId: Int,
	boatId: Int,
	signoutType: String,
	cardNum: Option[String],
	sailNumber: Option[String],
	hullNumber: Option[String],
	testRatingId: Option[Int],
	testResult: Option[String],
	isQueued: Boolean,
	signoutDatetime: Option[String],
	$$crew: List[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew],
	$$tests: List[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests],
)

case class StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew (
	signoutId: Int,
	personId: Option[Int],
	cardNum: Option[String],
	startActive: Option[String],
)

object StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew {
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew
		= v.as[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew]
}

case class StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests (
	signoutId: Int,
	personId: Int,
	ratingId: Int,
)

object StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests {
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests
		= v.as[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests]
}

object StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto {
	implicit val StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_CrewFormat
		= StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Crew.format
	implicit val StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_TestsFormat
		= StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto_Tests.format
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto
		= v.as[StaffDockhouseCreateSignoutMultiplePostResponseSuccessDto]
}


case class StaffDockhouseCreateSignoutMultiplePostRequestDto (
	signouts: List[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts],
)

case class StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts (
	skipperPersonId: Int,
	programId: Int,
	skipperCardNumber: String,
	skipperTestRatingId: Option[Int],
	boatId: Int,
	sailNumber: Option[String],
	hullNumber: Option[String],
	classSessionId: Option[Int],
	isRacing: Boolean,
	dockmasterOverride: Boolean,
	didInformKayakRules: Boolean,
	signoutCrew: List[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew],
)

case class StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew (
	personId: Int,
	cardNumber: String,
	testRatingId: Option[Int],
)

object StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew {
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew
		= v.as[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew]
}

object StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts {
	implicit val StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrewFormat
		= StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts_SignoutCrew.format
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts
		= v.as[StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts]
}

object StaffDockhouseCreateSignoutMultiplePostRequestDto {
	implicit val StaffDockhouseCreateSignoutMultiplePostRequestDto_SignoutsFormat
		= StaffDockhouseCreateSignoutMultiplePostRequestDto_Signouts.format
	implicit val format = Json.format[StaffDockhouseCreateSignoutMultiplePostRequestDto]
	def apply(v: JsValue): StaffDockhouseCreateSignoutMultiplePostRequestDto
		= v.as[StaffDockhouseCreateSignoutMultiplePostRequestDto]
}

