- pure function: given (string, font, maxwidth, option[max linehight]), return List[String] one element per line (truncated with ... if necessary)
- one mode: place elements (table, text) at coordinates (no overflow)
- different mode: given vertical position, start drawing full width, unknown height elements, making page breaks where needed (and iof table, repeating header)  (linear vertical overflow)
- different mode: given vertical position, start drawing 1/nth width, capped height elements, overflow to 2nd, 3rd, ..., nth column, truncate at end (column, Z-shaped overflow)

above modes: same logic for fitting tables into pages, as text into table cells.
  abstractions: flowing element, container


content stream wrapper?  tell that thing to draw at position, it handles page breaks?

table object:
  - construct with text, widthrestriction, option[heightrestriction]
  - get height/width functions
  - draw method (takes contentstream)
tr object


td object


want to be able to invoke the close rpt for close #12, the report for #13 etc, i.e. each report doesnt draw itself but exposes a method to be drawn either by itself or as part of a larger pdf doc

pdf writer class:
  - has the content stream
  - asks each report for it's page wrappers to draw them
  - ? should each report instance must start on a new page?

report object:
  - constructed with option[existing page to start in the middle of]
  - returns a list of page wrappers

page wrapper
  - specifies what to draw where
  - already knows where tables need to span across pages

---------------------------------------------------------------------------

report main object: calls each individual "chunk"

report headers and footers: achieved by giving chunks different x, y constraints

chunks e.g.
- the summary page
- the cash page
- the A/R page
- the summary table (not strictly a page)
- the membership table
- the donations table
- ....

each chunk declares whether it must begin a new page, or it can start midpage somewhere
(i.e. its given some vertical constraints, e.g. where the last chunk left off)

each chunk might span an arbitrary # of pages
would like to know how many pages without actually writing
each chunk is a function that takes info about how much space the last chunk used, plus the report cache,
and returns a collection of stuff to draw on each page (one coll el per page)
first element is what to do on the last page of the previous chunk
  e.g. "whole page" chunks will always return two things, an empty element saying "do nothing on the last page" and a second element with the actual stuff

chunks defined with table objects
table object itself defines a header object and a row collection
the chunk figures out if the table must span pages (still without an actual content stream though)
table would have renderHeader(), and renderRow(i) methods

---------------------------------------------------------

AbstractTable vs DrawableTable

AbstractTable is e.g. "the memberships table", subclass of ReportChunk
DrawableTable is e.g. "the first page worth of the memberships table". subclass of ReportDrawable

An abstract element takes a data source and return a list of PageWrappers, each containing drawables
A Drawable may not span multiple pages

------------------------------------------------------------
AbstractTable doesnt know anything about new pages
it just knows how much vertical space the first drawable has,
  and how much space subsequent drawables have
  and returns a list of drawables

need some containing thing to know if the overflow drawables go across new pages
  or e.g. new columns like the checks table